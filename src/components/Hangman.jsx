import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { connect } from "react-redux";
import '../styles/Hangman.css';

const words = [
    'apple',
    'baby',
    'bagel',
    'bang',
    'fullhouse',
    'happy',
    'poker',
    'sad',
    'tilted',
    'train',
    'troll',
    'liquid',
    'spoon',
    'hydrant',
    'normal',
    'icky',
    'sheep',
    'wobble',
    'mammoth',
    'pull',
    'boil',
    'disapprove',
    'material',
    'lucky',
    'obtain',
    'damaging',
    'better',
    'soap',
    'bury',
    'helpless',
    'scorch',
    'lamentable',
    'futuristic',
    'courageous',
    'quicksand',
    'elastic',
    'school',
    'remind',
    'workable',
    'food',
    'wash',
    'superb',
    'godly',
    'warlike',
    'guitar',
    'check',
    'remarkable',
    'homeless',
    'frightened',
    'analyze',
    'memory',
    'ray',
    'cowardly',
    'knock',
    'paste',
    'pine',
    'splendid',
    'taste',
    'pocket',
    'knot',
    'knife',
    'wrong',
    'embarrass',
    'stimulating',
    'able',
    'marry',
    'surprise',
    'quizzical',
    'beam',
    'fairies',
    'announce',
    'pot',
    'deranged',
    'late',
    'deadpan',
    'silent',
    'day',
    'funny',
    'real',
    'remove',
    'screeching',
    'round',
    'ignore',
    'remain',
    'fail',
    'teeny-tiny',
    'mice',
    'rejoice',
    'weight',
    'silly',
    'rabid',
    'amuse',
    'produce',
    'rare',
    'shut',
    'flower',
    'shake',
    'obeisant',
    'dizzy',
    'frogs',
    'amazing',
    'dramatic',
    'eye',
    'plough',
    'suffer',
    'materialistic',
    'grieving',
    'outstanding',
    'mundane',
    'sun',
    'pin',
    'nail',
    'average',
    'year',
    'spell',
    'throne',
    'shop',
    'healthy',
    'unbecoming',
    'ill',
    'various',
    'cheat',
    'scatter',
    'green',
    'argue',
    'rock',
    'phobic',
    'delight',
    'disarm',
    'dysfunctional',
    'quixotic',
    'difficult',
    'charming',
    'arithmetic',
    'committee',
    'romantic',
    'action',
    'death',
    'glossy',
    'view',
    'aromatic',
    'occur',
    'neighborly',
    'giants',
    'enchanted',
    'receive',
    'picayune',
    'sky',
    'selective',
    'next',
    'rebel',
    'addicted',
    'avoid',
    'smile',
    'ban',
    'striped',
    'equal',
    'love',
    'unpack',
    'perform',
    'bat',
    'venomous',
    'crayon',
    'easy',
    'obese',
    'infamous',
    'wheel',
    'drain',
    'competition',
    'ignorant',
    'cherries',
    'accidental',
    'ahead',
    'slope',
    'neat',
    'sense',
    'toys',
    'talk',
    'hollow',
    'uttermost',
    'pizzas',
    'bitter',
    'imported',
    'squeamish',
    'disillusioned',
    'self',
    'permissible',
    'yam',
    'chew',
    'protect',
    'eggnog',
    'literate',
    'impartial',
    'intelligent',
    'muddle',
    'dislike',
    'vanish',
    'tent',
    'vest',
    'bubble',
    'rail',
    'fierce',
    'dogs',
    'afterthought',
    'mere',
    'pets',
    'milky',
    'lackadaisical',
    'collect',
    'hissing',
    'true',
    'agree',
    'wire',
    'industrious',
    'waves',
    'unique',
    'innocent',
    'fence',
    'practice',
    'star',
    'safe',
    'tested',
    'bed',
    'record',
    'suggest',
    'dust',
    'doll',
    'wail',
    'special',
    'unruly',
    'top',
    'health',
    'notebook',
    'chilly',
    'fuel',
    'smiling',
    'raise',
    'payment',
    'melted',
    'behave',
    'wriggle',
    'buzz',
    'sassy',
    'puzzled',
    'narrow',
    'car',
    'craven',
    'happen',
    'sudden',
    'boorish',
    'pastoral',
    'prick',
    'jolly',
    'festive',
    'wink',
    'harbor',
    'horn',
    'excellent',
    'fragile',
    'tasty',
    'needy',
    'follow',
    'wonderful',
    'scarf',
    'yawn',
    'political',
    'overt',
    'scissors',
    'sofa',
    'hang',
    'frequent',
    'tightfisted',
    'illustrious',
    'glow',
    'descriptive',
    'furry',
    'drag',
    'hour',
    'sneeze',
    'admire',
    'rob',
    'imagine',
    'straw',
    'manage',
    'puny',
    'grateful',
    'thread',
    'keen',
    'jaded',
    'tire',
    'shocking',
    'agreement',
    'berserk',
    'worry',
    'meeting',
    'tomatoes',
    'whistle',
    'long-term',
    'introduce',
    'lonely',
    'tricky',
    'plain',
    'part',
    'basin',
    'duck',
    'fire',
    'angle',
    'bathe',
    'curtain',
    'educate',
    'rhetorical',
    'meal',
    'rifle',
    'things',
    'drown',
    'close',
    'weak',
    'chubby',
    'muddled',
    'callous',
    'blood',
    'limping',
    'wrap',
    'miscreant',
    'bath',
    'interfere',
    'squeeze',
    'unable',
    'curve',
    'appliance',
    'sneaky',
    'moaning',
    'immense',
    'cup',
    'release',
    'whirl',
    'detail',
    'messy',
    'dolls',
    'empty',
    'kind',
    'baseball',
    'stale',
    'yummy',
    'cloth',
    'military',
    'rot',
    'fax',
    'turn',
    'language',
    'face',
    'delay',
    'innate',
    'even',
    'detailed',
    'ruthless',
    'garrulous',
    'automatic',
    'symptomatic',
    'channel',
    'wholesale',
    'loutish',
    'laborer',
    'stare',
    'trouble',
    'paper',
    'scent',
    'wakeful',
    'hunt',
    'illegal',
    'mine',
    'advice',
    'astonishing',
    'mix',
    'abundant',
    'sip',
    'wing',
    'boiling',
    'old',
    'glass',
    'devilish',
    'magic',
    'joke',
    'error',
    'hill',
    'scared',
    'popcorn',
    'bored',
    'plot',
    'quirky',
    'basket',
    'peel',
    'oceanic',
    'destruction',
    'wilderness',
    'suck',
    'sprout',
    'productive',
    'exchange',
    'angry',
    'blind',
    'mug',
    'straight',
    'seat',
    'limit',
    'price',
    'mouth',
    'queue',
    'abject',
    'dangerous',
    'acidic',
    'realize',
    'slap',
    'tart',
    'closed',
    'weigh',
    'post',
    'arrogant',
    'inquisitive',
    'languid',
    'thin',
    'spark',
    'temper',
    'crush',
    'delirious',
    'bouncy',
    'thank',
    'unequaled',
    'enjoy',
    'tiresome',
    'chief',
    'victorious',
    'selfish',
    'middle',
    'canvas',
    'coil',
    'coach',
    'replace',
    'stiff',
    'rabbit',
    'haircut',
    'sidewalk',
    'umbrella',
    'legs',
    'pest',
    'puzzling',
    'air',
    'rainstorm',
    'teeth',
    'continue',
    'command',
    'abusive',
    'big',
    'cooperative',
    'profit',
    'honorable',
    'knowledge',
    'ball',
    'tug',
    'unbiased',
    'breathe',
    'change',
    'tree',
    'dance',
    'abhorrent',
    'lock',
    'supreme',
    'cross',
    'work',
    'evanescent',
    'spy',
    'representative',
    'worried',
    'terrible',
    'letters',
    'oatmeal',
    'writer',
    'learned',
    'legal',
    'quill',
    'careful',
    'possess',
    'downtown',
    'disturbed',
    'complain',
    'curly',
    'brake',
    'discreet',
    'shock',
    'ruddy',
    'therapeutic',
    'gamy',
    'care',
    'verdant',
    'merciful',
    'property',
    'boundary',
    'meat',
    'pancake',
    'tense',
    'pink',
    'separate',
    'breakable',
    'soda',
    'half',
    'rhyme',
    'evasive',
    'clear',
    'cake',
    'abstracted',
    'silk',
    'hearthstone',
    'warlock',
    'warrior',
    'priest',
    'shaman',
    'druid',
];

const maxGuesses = 15;
let timmy = null;

class Hangman extends PureComponent {
    constructor(props) {
        super(props);
        window.queueLocked = true;

        this.state = {
            wordToGuess: words[Math.floor(Math.random() * words.length)],
        };

        timmy = setInterval(() => {
            const { guesses, dispatch } = props;
            if (guesses.letters.length < maxGuesses) {
                dispatch({
                    type: 'FETCH_HANGMAN_GUESSES',
                });
            } else {
                // clear tim, to ensure no memory issues, bad tim
                clearInterval(timmy);
            }
        }, 1000);
    }

    render () {
        const { wordToGuess: word } = this.state;
        const { dispatch, guesses = { words: [], letters: [] }, id } = this.props;
        const letters = word.split('');
        const won = !(guesses.letters.length >= maxGuesses) && letters.reduce((prev, next) => {
            if (prev === false ) {
                return false;
            }
            return guesses.letters.includes(next) || guesses.words.includes(word);
        });

        if (won || guesses.letters.length >= maxGuesses) {
            const tim = setTimeout(() => {
                if (timmy) {
                    clearInterval(timmy);
                }
                window.queueLocked = false;
                dispatch({
                    type: 'RESET_HANGMAN',
                });
                dispatch({
                    type: 'REMOVE_FROM_QUEUE',
                    id,
                });
                // clear tim, to ensure no memory issues, bad tim
                clearTimeout(tim);
            }, 15 * 1000);
        }
        return (
            <>
                <div className="Hangman">
                    <div className="Hangman-letters">
                        <div className="Hangman-message">
                            {!won && guesses.letters.length < maxGuesses && (
                                <>
                                    Guesses left {maxGuesses - guesses.letters.length} of {maxGuesses}
                                </>
                            )}
                            {!won && guesses.letters.length >= maxGuesses && (
                                <>
                                    Game over, chat lost! The word was <b>{word}</b>
                                </>
                            )}
                            {won && (
                                <>
                                    WOOOOOOOOOOOOO! Chat won! The word was <b>{word}</b>
                                </>
                            )}
                        </div>
                        {letters.map((letter, i) => (
                            <div className="Hangman-letter">
                                {!won && (
                                    <>
                                        {guesses.letters.includes(letter) ? letter : '-'}
                                    </>
                                )}
                                {won && (
                                    <>
                                        {letter}
                                    </>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
                {!won && guesses.letters.length > 0 && (
                    <div className="HangmanG">
                        <div className="Hangman-letters">
                            <div className="Hangman-message">
                                Guesses...
                            </div>
                            <div className="Hangman-guess">
                                {guesses.letters.sort().map((guess, i) => (
                                    <>
                                        {guess}&nbsp;
                                    </>
                                ))}
                            </div>
                        </div>
                    </div>
                )}
            </>
        );
    }
}

Hangman.propTypes = {
    dispatch: PropTypes.func.isRequired,
    guesses: PropTypes.shape({
        letters: PropTypes.array.isRequired,
        words: PropTypes.array.isRequired,
    }).isRequired,
    id: PropTypes.string.isRequired,
}

export default connect((state, props) => {
    // there could be logic here one day so that is why
    return {
        ...state,
        ...props,
    };
})(Hangman);

